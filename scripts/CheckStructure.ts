// scripts/CheckStructure.ts

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import fg from 'fast-glob';

// ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö __dirname ‡πÉ‡∏ô ESM
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Root ‡πÅ‡∏•‡∏∞ Output file
const ROOT_DIR = path.resolve(__dirname, '../src');
const OUTPUT_FILE = path.resolve(__dirname, '../STRUCTURE.md');

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á indentation
function indent(level: number): string {
  return '  '.repeat(level);
}

// ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á paths ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô tree ‡πÅ‡∏ö‡∏ö markdown
function formatTree(entries: string[], baseDir: string): string {
  const tree: string[] = [];
  const seen = new Set<string>();

  for (const entry of entries) {
    const relPath = path.relative(baseDir, entry);
    const parts = relPath.split(path.sep);

    let currentPath = '';
    parts.forEach((part, index) => {
      currentPath = path.join(currentPath, part);
      const key = `${index}-${currentPath}`;
      if (seen.has(key)) return;

      seen.add(key);
      const isFile = part.includes('.') && index === parts.length - 1;
      const line = `${indent(index)}- ${part}${isFile ? '' : '/'}`;
      tree.push(line);
    });
  }

  return tree.join('\n');
}

// ‚úÖ main: Generate STRUCTURE.md
async function main() {
  try {
    const entries = await fg(['**/*.{ts,tsx}'], {
      cwd: ROOT_DIR,
      onlyFiles: true,
      dot: false,
      absolute: true,
    });

    const header = [
      '# üìÅ Project Source Structure (`src/`)',
      '',
      '```text',
    ].join('\n');

    const footer = [
      '```',
      '',
      '> ‚úÖ Generated by `scripts/CheckStructure.ts`',
      '> ‚ÑπÔ∏è NOTE: ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á Dev to Dev ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î ‡πÄ‡∏ô‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á project ‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£ generate ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏ï‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏£‡∏≤‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏≠‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç format code ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ‡πÉ‡∏´‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô Code ‡πÉ‡∏´‡πâ professional ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏™‡∏±‡πà‡∏á'
    ].join('\n');

    const body = formatTree(entries, ROOT_DIR);
    const output = [header, body, footer].join('\n');

    fs.writeFileSync(OUTPUT_FILE, output, 'utf-8');
    console.log(`‚úÖ STRUCTURE.md generated at: ${OUTPUT_FILE}`);
  } catch (err) {
    console.error('‚ùå Error generating structure:', err);
    process.exit(1);
  }
}

main();